import aiohttp
from a0_config import AVIASALES_TOKEN
import requests

 


departure_date = "2024-05-17"
# return_date = "2022-12"
return_date = ""
departure_code = "MOW"
destination_code = "BKK"

is_direct = "true"

# –ø–æ–∏—Å–∫ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É 
# –ø–æ–∏—Å–∫ –≤ —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 30 –¥–Ω–µ–π –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç)
# –≤—ã–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ - –¥–∏–∞–ø–∞–∑–æ–Ω
# –≤—ã–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–±—ã–≤–∞–Ω–∏—è 


def find_ticket():
    currency = "" # ‚Äî the currency of prices. The default value is RUB
    origin = "" # ‚Äî An IATA code of a city or an airport of the origin
    destination = "" # ‚Äî An IATA code of a city or an airport of the destination (if you don't specify the origin parameter, you must set the destination)
    departure_at = "" # ‚Äî the departure date (YYYY-MM or YYYY-MM-DD)
    return_at = "" # ‚Äî the return date. For one-way tickets do not specify it
    one_way = "" # ‚Äîone-way tickets, possible values: true or false. If true, returns 1 ticket. Use false to get offers for return tickets as well.
    direct = "" # ‚Äî non-stop tickets, possible values: true or false. By default:  false
    market = "" # ‚Äî sets the market of the data source (by default, ru)
    limit = "" # ‚Äî the total number of records on a page. The default value ‚Äî 30. The maximum value ‚Äî 1000
    page = "" # ‚Äî a page number, is used to get a limited amount of results. For example, if we want to get the entries from 100 to 150, we need to set page=3, and limit=50
    sorting = "" # ‚Äî the assorting of prices: by price/route
        # by the price (the default value). For the directions, only city ‚Äî city assorting by the price is possible
        # by the popularity of a route.
    unique = "" # ‚Äî returning only unique routes, if only origin specified, true or false. By default: false
    token = "" # ‚Äî your API token.

    url = f"https://api.travelpayouts.com/aviasales/v3/prices_for_dates?currency={currency}&origin={origin}&destination={destination}&departure_at={departure_at}&return_at={return_at}&one_way={one_way}&direct={direct}&market={market}&limit={limit}&page={page}&sorting={sorting}&unique={unique}&token={token}"
    req = requests.get(url)
    return req 



async def async_find_ticket():
    currency = "" # ‚Äî the currency of prices. The default value is RUB
    origin = "" # ‚Äî An IATA code of a city or an airport of the origin
    destination = "" # ‚Äî An IATA code of a city or an airport of the destination (if you don't specify the origin parameter, you must set the destination)
    departure_at = "" # ‚Äî the departure date (YYYY-MM or YYYY-MM-DD)
    return_at = "" # ‚Äî the return date. For one-way tickets do not specify it
    one_way = "" # ‚Äîone-way tickets, possible values: true or false. If true, returns 1 ticket. Use false to get offers for return tickets as well.
    direct = "" # ‚Äî non-stop tickets, possible values: true or false. By default:  false
    market = "" # ‚Äî sets the market of the data source (by default, ru)
    limit = "" # ‚Äî the total number of records on a page. The default value ‚Äî 30. The maximum value ‚Äî 1000
    page = "" # ‚Äî a page number, is used to get a limited amount of results. For example, if we want to get the entries from 100 to 150, we need to set page=3, and limit=50
    sorting = "" # ‚Äî the assorting of prices: by price/route
        # by the price (the default value). For the directions, only city ‚Äî city assorting by the price is possible
        # by the popularity of a route.
    unique = "" # ‚Äî returning only unique routes, if only origin specified, true or false. By default: false
    token = "" # ‚Äî your API token.

    url = f"https://api.travelpayouts.com/aviasales/v3/prices_for_dates?currency={currency}&origin={origin}&destination={destination}&departure_at={departure_at}&return_at={return_at}&one_way={one_way}&direct={direct}&market={market}&limit={limit}&page={page}&sorting={sorting}&unique={unique}&token={token}"
    req = requests.get(url)

    response = req.json()
    return response 



def generate_message(response, departure_city, arrive_city):

    currency = response['currency']
    price = response['data']['price']
    departure_date = response['data']['departure_at']
    transfers = response['data']['transfers'] # if transfers 0 then it's direct flight 
    departure_city = response['data']
    arrive_city = response['data']
    link = response['data']['link']

    msg = ""

    pass

{
   "data": [
      {
         "flight_number": "105",
         "link": "/search/MOW2202IKT20031?t=U617086302001708668900000345DMEIKT17110065001711011600000385IKTDME_8f63e6f44a20e1fe102cfc91f5d8404b_36000&search_date=19022024&expected_price_uuid=f7ba74ce-e062-480b-82ad-66972299f820&expected_price_source=share&expected_price_currency=rub&expected_price=36000",
         "origin_airport": "DME",
         "destination_airport": "IKT",
         "departure_at": "2024-02-22T19:30:00+03:00",
         "airline": "U6",
         "destination": "IKT",
         "return_at": "2024-03-21T07:35:00+08:00",
         "origin": "MOW",
         "price": 36000,
         "return_transfers": 0,
         "duration": 730,
         "duration_to": 345,
         "duration_back": 385,
         "transfers": 0
      }
   ],
   "currency": "rub",
   "success": true
}



def format_flight_message(flights_info):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ä–µ–π—Å–∞—Ö –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param flights_info: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–π—Å–∞—Ö.
    :return: –°—Ç—Ä–æ–∫–∞ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    messages = []
    counter = 1
    for flight in flights_info:
        message = (f"{counter})üí∞ <b>{flight['price']}</b> ‚ÇΩ "
                   f"üìÖ <b><a href=\"{flight['link']}\">{flight['departure_date']} –≤ {flight['departure_time']}</a></b> "
                   f"üõ´ <b>{flight['amount_transfers']}</b>\n"
                   f"üèô {flight['cities_FromTo']}\n")
        messages.append(message)
        counter += 1
    return "\n".join(messages)



def send_telegram_message(message, chat_id="89221080", bot_token="6736500032:AAFlT2hpvXNz6ry00Xejl0jBZWZQm2Sznkk"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç.

    :param message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    :param chat_id: ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param bot_token: –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather.
    """
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    response = requests.post(url, data=data)
    return response.json()